/*
 * Ergo Explorer API v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.ergoplatform.explorer.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.ergoplatform.explorer.client.model.DataInputInfo;
import org.ergoplatform.explorer.client.model.InputInfo;
import org.ergoplatform.explorer.client.model.OutputInfo;
/**
 * TransactionInfo
 */


public class TransactionInfo {
  @SerializedName("id")
  private String id = null;

  @SerializedName("blockId")
  private String blockId = null;

  @SerializedName("inclusionHeight")
  private Integer inclusionHeight = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("index")
  private Integer index = null;

  @SerializedName("numConfirmations")
  private Integer numConfirmations = null;

  @SerializedName("inputs")
  private java.util.List<InputInfo> inputs = null;

  @SerializedName("dataInputs")
  private java.util.List<DataInputInfo> dataInputs = null;

  @SerializedName("outputs")
  private java.util.List<OutputInfo> outputs = null;

  @SerializedName("size")
  private Integer size = null;

  public TransactionInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Transaction ID
   * @return id
  **/
  @Schema(required = true, description = "Transaction ID")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TransactionInfo blockId(String blockId) {
    this.blockId = blockId;
    return this;
  }

   /**
   * ID of the corresponding header
   * @return blockId
  **/
  @Schema(required = true, description = "ID of the corresponding header")
  public String getBlockId() {
    return blockId;
  }

  public void setBlockId(String blockId) {
    this.blockId = blockId;
  }

  public TransactionInfo inclusionHeight(Integer inclusionHeight) {
    this.inclusionHeight = inclusionHeight;
    return this;
  }

   /**
   * Height of the block the transaction was included in
   * @return inclusionHeight
  **/
  @Schema(required = true, description = "Height of the block the transaction was included in")
  public Integer getInclusionHeight() {
    return inclusionHeight;
  }

  public void setInclusionHeight(Integer inclusionHeight) {
    this.inclusionHeight = inclusionHeight;
  }

  public TransactionInfo timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp the transaction got into the network
   * @return timestamp
  **/
  @Schema(required = true, description = "Timestamp the transaction got into the network")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public TransactionInfo index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Index of a transaction inside a block
   * @return index
  **/
  @Schema(required = true, description = "Index of a transaction inside a block")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public TransactionInfo numConfirmations(Integer numConfirmations) {
    this.numConfirmations = numConfirmations;
    return this;
  }

   /**
   * Number of transaction confirmations
   * @return numConfirmations
  **/
  @Schema(required = true, description = "Number of transaction confirmations")
  public Integer getNumConfirmations() {
    return numConfirmations;
  }

  public void setNumConfirmations(Integer numConfirmations) {
    this.numConfirmations = numConfirmations;
  }

  public TransactionInfo inputs(java.util.List<InputInfo> inputs) {
    this.inputs = inputs;
    return this;
  }

  public TransactionInfo addInputsItem(InputInfo inputsItem) {
    if (this.inputs == null) {
      this.inputs = new java.util.ArrayList<InputInfo>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @Schema(description = "")
  public java.util.List<InputInfo> getInputs() {
    return inputs;
  }

  public void setInputs(java.util.List<InputInfo> inputs) {
    this.inputs = inputs;
  }

  public TransactionInfo dataInputs(java.util.List<DataInputInfo> dataInputs) {
    this.dataInputs = dataInputs;
    return this;
  }

  public TransactionInfo addDataInputsItem(DataInputInfo dataInputsItem) {
    if (this.dataInputs == null) {
      this.dataInputs = new java.util.ArrayList<DataInputInfo>();
    }
    this.dataInputs.add(dataInputsItem);
    return this;
  }

   /**
   * Get dataInputs
   * @return dataInputs
  **/
  @Schema(description = "")
  public java.util.List<DataInputInfo> getDataInputs() {
    return dataInputs;
  }

  public void setDataInputs(java.util.List<DataInputInfo> dataInputs) {
    this.dataInputs = dataInputs;
  }

  public TransactionInfo outputs(java.util.List<OutputInfo> outputs) {
    this.outputs = outputs;
    return this;
  }

  public TransactionInfo addOutputsItem(OutputInfo outputsItem) {
    if (this.outputs == null) {
      this.outputs = new java.util.ArrayList<OutputInfo>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @Schema(description = "")
  public java.util.List<OutputInfo> getOutputs() {
    return outputs;
  }

  public void setOutputs(java.util.List<OutputInfo> outputs) {
    this.outputs = outputs;
  }

  public TransactionInfo size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Transaction size in bytes
   * @return size
  **/
  @Schema(required = true, description = "Transaction size in bytes")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionInfo transactionInfo = (TransactionInfo) o;
    return Objects.equals(this.id, transactionInfo.id) &&
        Objects.equals(this.blockId, transactionInfo.blockId) &&
        Objects.equals(this.inclusionHeight, transactionInfo.inclusionHeight) &&
        Objects.equals(this.timestamp, transactionInfo.timestamp) &&
        Objects.equals(this.index, transactionInfo.index) &&
        Objects.equals(this.numConfirmations, transactionInfo.numConfirmations) &&
        Objects.equals(this.inputs, transactionInfo.inputs) &&
        Objects.equals(this.dataInputs, transactionInfo.dataInputs) &&
        Objects.equals(this.outputs, transactionInfo.outputs) &&
        Objects.equals(this.size, transactionInfo.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, blockId, inclusionHeight, timestamp, index, numConfirmations, inputs, dataInputs, outputs, size);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionInfo {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    blockId: ").append(toIndentedString(blockId)).append("\n");
    sb.append("    inclusionHeight: ").append(toIndentedString(inclusionHeight)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    numConfirmations: ").append(toIndentedString(numConfirmations)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    dataInputs: ").append(toIndentedString(dataInputs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
