/*
 * Ergo Explorer API v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.ergoplatform.explorer.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.ergoplatform.explorer.client.model.AdditionalRegisters;
import org.ergoplatform.explorer.client.model.AssetInstanceInfo;
/**
 * InputInfo
 */


public class InputInfo {
  @SerializedName("boxId")
  private String boxId = null;

  @SerializedName("value")
  private Long value = null;

  @SerializedName("index")
  private Integer index = null;

  @SerializedName("spendingProof")
  private String spendingProof = null;

  @SerializedName("outputBlockId")
  private String outputBlockId = null;

  @SerializedName("outputTransactionId")
  private String outputTransactionId = null;

  @SerializedName("outputIndex")
  private Integer outputIndex = null;

  @SerializedName("ergoTree")
  private String ergoTree = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("assets")
  private java.util.List<AssetInstanceInfo> assets = null;

  @SerializedName("additionalRegisters")
  private AdditionalRegisters additionalRegisters = null;

  public InputInfo boxId(String boxId) {
    this.boxId = boxId;
    return this;
  }

   /**
   * ID of the corresponding box
   * @return boxId
  **/
  @Schema(required = true, description = "ID of the corresponding box")
  public String getBoxId() {
    return boxId;
  }

  public void setBoxId(String boxId) {
    this.boxId = boxId;
  }

  public InputInfo value(Long value) {
    this.value = value;
    return this;
  }

   /**
   * Number of nanoErgs in the corresponding box
   * @return value
  **/
  @Schema(required = true, description = "Number of nanoErgs in the corresponding box")
  public Long getValue() {
    return value;
  }

  public void setValue(Long value) {
    this.value = value;
  }

  public InputInfo index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Index of the input in a transaction
   * @return index
  **/
  @Schema(required = true, description = "Index of the input in a transaction")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public InputInfo spendingProof(String spendingProof) {
    this.spendingProof = spendingProof;
    return this;
  }

   /**
   * Hex-encoded serialized sigma proof
   * @return spendingProof
  **/
  @Schema(description = "Hex-encoded serialized sigma proof")
  public String getSpendingProof() {
    return spendingProof;
  }

  public void setSpendingProof(String spendingProof) {
    this.spendingProof = spendingProof;
  }

  public InputInfo outputBlockId(String outputBlockId) {
    this.outputBlockId = outputBlockId;
    return this;
  }

   /**
   * Modifier ID
   * @return outputBlockId
  **/
  @Schema(required = true, description = "Modifier ID")
  public String getOutputBlockId() {
    return outputBlockId;
  }

  public void setOutputBlockId(String outputBlockId) {
    this.outputBlockId = outputBlockId;
  }

  public InputInfo outputTransactionId(String outputTransactionId) {
    this.outputTransactionId = outputTransactionId;
    return this;
  }

   /**
   * ID of the transaction outputting corresponding box
   * @return outputTransactionId
  **/
  @Schema(required = true, description = "ID of the transaction outputting corresponding box")
  public String getOutputTransactionId() {
    return outputTransactionId;
  }

  public void setOutputTransactionId(String outputTransactionId) {
    this.outputTransactionId = outputTransactionId;
  }

  public InputInfo outputIndex(Integer outputIndex) {
    this.outputIndex = outputIndex;
    return this;
  }

   /**
   * Index of the output corresponding this input
   * @return outputIndex
  **/
  @Schema(required = true, description = "Index of the output corresponding this input")
  public Integer getOutputIndex() {
    return outputIndex;
  }

  public void setOutputIndex(Integer outputIndex) {
    this.outputIndex = outputIndex;
  }

  public InputInfo ergoTree(String ergoTree) {
    this.ergoTree = ergoTree;
    return this;
  }

   /**
   * Hex-encoded string
   * @return ergoTree
  **/
  @Schema(required = true, description = "Hex-encoded string")
  public String getErgoTree() {
    return ergoTree;
  }

  public void setErgoTree(String ergoTree) {
    this.ergoTree = ergoTree;
  }

  public InputInfo address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Decoded address of the corresponding box holder
   * @return address
  **/
  @Schema(required = true, description = "Decoded address of the corresponding box holder")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public InputInfo assets(java.util.List<AssetInstanceInfo> assets) {
    this.assets = assets;
    return this;
  }

  public InputInfo addAssetsItem(AssetInstanceInfo assetsItem) {
    if (this.assets == null) {
      this.assets = new java.util.ArrayList<AssetInstanceInfo>();
    }
    this.assets.add(assetsItem);
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @Schema(description = "")
  public java.util.List<AssetInstanceInfo> getAssets() {
    return assets;
  }

  public void setAssets(java.util.List<AssetInstanceInfo> assets) {
    this.assets = assets;
  }

  public InputInfo additionalRegisters(AdditionalRegisters additionalRegisters) {
    this.additionalRegisters = additionalRegisters;
    return this;
  }

   /**
   * Get additionalRegisters
   * @return additionalRegisters
  **/
  @Schema(required = true, description = "")
  public AdditionalRegisters getAdditionalRegisters() {
    return additionalRegisters;
  }

  public void setAdditionalRegisters(AdditionalRegisters additionalRegisters) {
    this.additionalRegisters = additionalRegisters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputInfo inputInfo = (InputInfo) o;
    return Objects.equals(this.boxId, inputInfo.boxId) &&
        Objects.equals(this.value, inputInfo.value) &&
        Objects.equals(this.index, inputInfo.index) &&
        Objects.equals(this.spendingProof, inputInfo.spendingProof) &&
        Objects.equals(this.outputBlockId, inputInfo.outputBlockId) &&
        Objects.equals(this.outputTransactionId, inputInfo.outputTransactionId) &&
        Objects.equals(this.outputIndex, inputInfo.outputIndex) &&
        Objects.equals(this.ergoTree, inputInfo.ergoTree) &&
        Objects.equals(this.address, inputInfo.address) &&
        Objects.equals(this.assets, inputInfo.assets) &&
        Objects.equals(this.additionalRegisters, inputInfo.additionalRegisters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boxId, value, index, spendingProof, outputBlockId, outputTransactionId, outputIndex, ergoTree, address, assets, additionalRegisters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputInfo {\n");
    
    sb.append("    boxId: ").append(toIndentedString(boxId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    spendingProof: ").append(toIndentedString(spendingProof)).append("\n");
    sb.append("    outputBlockId: ").append(toIndentedString(outputBlockId)).append("\n");
    sb.append("    outputTransactionId: ").append(toIndentedString(outputTransactionId)).append("\n");
    sb.append("    outputIndex: ").append(toIndentedString(outputIndex)).append("\n");
    sb.append("    ergoTree: ").append(toIndentedString(ergoTree)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    additionalRegisters: ").append(toIndentedString(additionalRegisters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
